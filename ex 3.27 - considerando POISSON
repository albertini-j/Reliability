{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IPython console for SymPy 1.4 (Python 3.7.4-64-bit) (ground types: python)\n",
      "\n",
      "These commands were executed:\n",
      ">>> from __future__ import division\n",
      ">>> from sympy import *\n",
      ">>> x, y, z, t = symbols('x y z t')\n",
      ">>> k, m, n = symbols('k m n', integer=True)\n",
      ">>> f, g, h = symbols('f g h', cls=Function)\n",
      ">>> init_printing()\n",
      "\n",
      "Documentation can be found at https://docs.sympy.org/1.4/\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#exemplo apostila página 228\n",
    "from sympy import *\n",
    "init_session()\n",
    "from sympy.stats import *\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "F, a, b, R, mttf, l , p,sigma_p, mi_p, q =symbols('F a b R mttf l p sigma_p mi_p q')\n",
    "\n",
    "u=0.001\n",
    "s=0.0005\n",
    "t=15000\n",
    "PrEO = (l**t)*exp(-l)/ #Pr(E | Theta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⎛         -1500⋅l⎞  -13500⋅l\n",
      "⎝10 - 10⋅ℯ       ⎠⋅ℯ        \n"
     ]
    }
   ],
   "source": [
    "pprint(PrEO)\n",
    "p_i = np.linspace(0.000001,0.01,10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "FO=Normal('FO', u,s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "N(density(FO)(0.001))\n",
    "PrxF=PrEO*density(FO)(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "denominador =0.0139828591962772\n",
      "ou 71.5161317126215\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "numerical_integration=0\n",
    "guardando=[]\n",
    "temp_antigo=N(PrxF.subs(l,p_i[0]))                                    \n",
    "guardando.append(temp_antigo)\n",
    "for i in range(1,len(p_i)):\n",
    "    temp= N(PrxF.subs(l,p_i[i]))\n",
    "    guardando.append(temp)\n",
    "    numerical_integration = numerical_integration+(temp_antigo+temp)*(p_i[i]-p_i[i-1])/2\n",
    "    temp_antigo=temp\n",
    "print('denominador ='+str(numerical_integration))\n",
    "print('ou '+str(1/numerical_integration))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "numerador=np.array(guardando)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "pontos = np.divide(numerador,numerical_integration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x21d64f4db08>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(p_i,pontos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "integral numérica =1.00000000000000\n"
     ]
    }
   ],
   "source": [
    "numerical_integration2=0\n",
    "guardando2=[]\n",
    "temp_antigo=pontos[0]                                    \n",
    "for i in range(1,len(p_i)):\n",
    "    temp= pontos[i] \n",
    "    numerical_integration2 = numerical_integration2+(temp_antigo+temp)*(p_i[i]-p_i[i-1])/2\n",
    "    guardando2.append((temp_antigo+temp)*(p_i[i]-p_i[i-1])/2)\n",
    "    temp_antigo=temp\n",
    "print('integral numérica ='+str(numerical_integration2))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "guardando2.append(0)\n",
    "cumsum = np.cumsum(guardando2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAR4AAAASCAYAAACNfLEZAAAABHNCSVQICAgIfAhkiAAABLxJREFUeJztm1uIVlUUx39eKk1K06J5UJTsYqnYSxQRiQrTSz6ULwXdoB6ssAQFKRC/CHF8qAwxrAejRIQKqoeykiIqJTCcUhNtko6G4yURJS/VDI4Pax2/4559zpyz/ea4gv2Hw55Z5/zX/q/N2Yuz914fRERERFxmrAS+Bv4EzgLHgU5gGTCugp9xwDPAx8Dv6usk8APwNDA0hzceWAd0A/8CCbAKuK6grzo4VnXFWOzpSoC+nOtwQR8WUXWsEgJj/w/4UTvrAFYD25R4EJhQUvB85XQDG4AV6vOE2j8ChjicycARvf+J9v+N/r8Hf+Krg2NVV4zFpq4Eec8bnmuxx79VhIxVQmDsI3Lsy7XDt0qKng3Mpf+XTRtwQH3Nc+59qfYFjv11ta/19FMHx6quEI5VXSEcq7oSvf7vCBmrhBbHPkM729wCXy+rr9UZ201q+4P+yeoa4BRwGhhVM8eqrhiLTV1waZNvHrAJOIasPrqQ+TIs0F8oQuKGCrHn7bW4mKvtjpLPF6FH296Mbba2XwHnnOf/BrYAVwP31MyxqivGYlNXiquAx5Ck8SIwi+LkMQzYiGxB3Ax8iKwuziGrjXUF3MFAaNxQMva8xLMYWZe9AXwPvIoknY4q6j0YDjyhf3+Rsd+m7W85vC5tb62ZY1VXCMeqrhCOVV0p2oD1SNJYheyNdAEzc/y8CTyCzK/bgWeBhcA0YCsyZ+7I4Q4GQuOGkrEXJZ5lSPD3IUmiHfirpPA8dCCD+TmyhkwxWtuTObzUPqZmjlVdIRyrukI4VnUBvAvMQSbgKGA68DYwCVlGzXB83A08B3wKvMTFK4Ee4L3Mc3UhJG6oEPvwHMdt2t4I3IskjE7gQWB7WfUOXgAWITvij1fkpidgfcY4VnWFcKzqCuFcTl2vOM/sQk55TyHvfwN4KHN/gfo5o/dcTHP68iEBJpbQm2IDshwKRd5YlY49L/GkOILU4mxHPrvepzkQVfA88jm5G8mIx537aQYdjR/XOs/VxbGqK4RjVVcIx6quIqxFJt/9jr1d20cH4B8ouLcP+KeEhhTdA9xvZdzgiX2gxJNiP5I07gSuR3bdy2Ihsle0C0k6Rz3P7NXWt2YEuEXb7JqzDo5VXSEcq7pCOFZ1FSF977MnQSOAG4DvyN//KYM5l8D1oZVxgz/20kiLiYoqPF0sUU4nkrDyMJmBj+/OcLHwOjhWdcVYbOoqwgPqa3fGNlJtv5bg14lWxg3+2C9gCs29nSyG0iwg3OIROAW4wsNbqpyfgLElxFktCLOqK4RjVVcIx6Kuqfjf9YnIyU4fcsycxS9qf9jDAzncqbuOB6qPVUjsgCyJepDfar1D82cO+5R0iP5Heonem+TYn1R7L7LManiupxyOW6K9gmaJ9l7KlbMPBseqrhiLPV0NZK9lE1KHsxKpzTmrz38GXOn4b0fmXR9SoPsaMmc+QOZe0d7OYKLqWDWoHjsgm8ZrgJ+RPZxeZPNomzr1ZbMEf+JpqL3o+tbjbwJyJHcIqdzcj2xKF30x1cGxqivGYkvXTKQQcA/ym6UepARlM1KLk3cydRcySQ8r5xiwEzmKbvX+TRVUGavQ2CMiIiIiIiIiIiIiIiJag/MDTtxqRjbpNwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle 3.2000000000000005e-05$"
      ],
      "text/plain": [
       "3.2000000000000005e-05"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P05 = (np.abs(cumsum - 0.05)).argmin()\n",
    "p_i[P05]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGAAAAASCAYAAACkctvyAAAABHNCSVQICAgIfAhkiAAAAlRJREFUWIXt2DtoFFEUBuAvPsGg8dFYKAZDVBCxtTKrFrYKlmJtIxZaWcVCVBBRBNFGBQUbCxvxBWnE3kLUKOLa+Gyi8S24FnOTTDb7mHt3fBT7w+Uw957z/4c9szPnDF38d1iBC3iF76jiFJb8Ba4U7diYXTiDe/iIGq604K8Gn0brTUkakxjA2xBwHccwEq6fYFkRkkSuFO2UmAfhfByPFSvAGIYbrINNYmI1JnE7OO+r2z8Z9s8VIUnkStFOidmCQfSgolgBqi3OGyFWA6wOji8wq+5sIT7hM3oLJBDLlaJdRr4Vf6YAhTXyiW8N9g5+1fmN4z4WYFMB0ViuFO0y822H+diNQ9gvu8Nnl8A7rQBrg33axPdZsGsK8MZypWiXmW87LMdlHJG94EcC/1CnxPkC9AX7oYnvxP7iAryxXCnaZebbChexTVaEXmzAefTjJjZ2Qj4nwrcn2FongolcKdpl5Xu47voh9sreMQdk3dDOVPL8P2Dijulr5IhFdX6tEMuVol1mvimY6LA2d0KSL8BosM2emYPBNnvm5hHLlaJdZr4peBdska6wEAa0b+u+FBSM5UrRLiPfioghqQ7bQ+yjNn5RGrGDzQDWYW4JXH9rEMujovWPsx5LG+yvknVBNVlr2onGNNSP9kdNjfajZo721XDWXwJXrH9qzA5cCutW8H2e2zuR8x3GN1m3cxbHcQ1fQ9wNzOtQYwZWylqv1/iBlzit8Z1Q1bwAsVwp/ikxw5p/XKuZPvUO4arsu9IYfuI97mKPqU6rE40uuuiii3+F3wfcOVLnaJXjAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 0.000151$"
      ],
      "text/plain": [
       "0.000151"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P50=  (np.abs(cumsum - 0.5)).argmin()\n",
    "p_i[P50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAARIAAAASCAYAAACXQFGXAAAABHNCSVQICAgIfAhkiAAAA2dJREFUeJztm8uPDFEUxn/DSIzXeGxNIiaDEQs2IiIy7ImFsCGxEFZiL0HvSDwyYkM8E/4AiUcQLEzETuyYkYlmhNgIxjthLOp05qqp2911uvp0mbpfcnO76pzvnPPddJ/U4zYEBAQENAELgYvAW+AnUAb6gXkGsTS5G613JzAmY3eCfStwGhgAPovf1RoxNRyw0W+1xkXWkte60nB2Mf678I3fviTdwHtxugYcBR7I8XNgQZUCG42lyd1ovV3AR2AUfyN5KrZR4Bn1NQUNx0K/1RoXWUte60rLWQmUPOO+cG4k5ADgjjjsi50/KefP+IgZxNLkbqTeNuAeMAwcw99INgA94t9HfU1Bw7HQb7XGRdaS17q0nCQ8Fv/NScbFYnwJTInZZgNfgK/AzDoSpY2lyd1ovfuBP8B6oi7rayQu+qj/NiUNx0K/1RoXWUte69JykrBC4rwBplZOugE3ynyX6AfmYhR4BMwA1tRIpImlyd1Ivb1El3WngIfVpZjAQr/VGhdZS17r0nKSsFfmCzjPSNxGslTmIU+AFzIvqZFIE0uTW1tvO3AFeA0c8HCtYaHfao2LrCWvdWk5cXQAO4ga0XnX0O587pT5kydI5fzcKom0sTS5tfUeAlYB64DvHq41LPRbrXGRteS1Li0njm1ivwmMuIb4vVI1tMk8loKTVSxN7iTOaqKrkBNED4z+F2Slv9U5rDihruZw9sh8Nm5wG0mlI3XGnQRzYn7VkDaWJndaTuWWZgg46OG0Chb6LXJYcUJdNhwXy4G1RA9Zb8WNbiMZlNl3j9Qjs+8ey0XaWJrcaTmzxLcX+MG/G2sOi885Oe73xGwWLPRb5LDihLpsOC4SH7ImoZvar4e+Ud/r37SxNLnTcjqIHhAljScSa0COt3t09dGc178W+i1yFF1LXuvSciqYDnwgaiBdCfYJSLthpRtYBkzLIFYrN9iUaO0+EgibpSaLlrzWpeXA+N9IrnvsExDfQnuE8S20g0zcdlsW26IMYqX113KSUMLfSLYAl2XcFr9h59zxjDgW+q3WuMha8lqXlgPRlfoYsMljT0QXcAl4B/wCXhFt3Jqf4FvG30jSxtL4azlxlPA3korNN8oZcbRa8rrGRdaS17o0nF6i7+wIzk7WgICAgICAgICAgICASYi/71rg9TyRfUwAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle 0.00041100000000000007$"
      ],
      "text/plain": [
       "0.00041100000000000007"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P95= (np.abs(cumsum - 0.95)).argmin()\n",
    "p_i[P95]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
