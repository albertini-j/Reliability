{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IPython console for SymPy 1.4 (Python 3.7.4-64-bit) (ground types: python)\n",
      "\n",
      "These commands were executed:\n",
      ">>> from __future__ import division\n",
      ">>> from sympy import *\n",
      ">>> x, y, z, t = symbols('x y z t')\n",
      ">>> k, m, n = symbols('k m n', integer=True)\n",
      ">>> f, g, h = symbols('f g h', cls=Function)\n",
      ">>> init_printing()\n",
      "\n",
      "Documentation can be found at https://docs.sympy.org/1.4/\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#exemplo apostila página 228\n",
    "from sympy import *\n",
    "init_session()\n",
    "from sympy.stats import *\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "init_printing(use_latex='mathjax')\n",
    "\n",
    "F, a, b, R, mttf, l , p,sigma_p, mi_p, q =symbols('F a b R mttf l p sigma_p mi_p q')\n",
    "\n",
    "u=0.001\n",
    "s=0.0005\n",
    "PrEO = 10*(Integral(l*exp(-l*t),(t,0,1500)))*(1-(Integral(l*exp(-l*t),(t,0,1500))))**9 #Pr(E | Theta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        9                \n",
      "   ⎛    1500           ⎞  1500           \n",
      "   ⎜     ⌠             ⎟   ⌠             \n",
      "   ⎜     ⎮      -l⋅t   ⎟   ⎮      -l⋅t   \n",
      "10⋅⎜1 -  ⎮   l⋅ℯ     dt⎟ ⋅ ⎮   l⋅ℯ     dt\n",
      "   ⎜     ⌡             ⎟   ⌡             \n",
      "   ⎝     0             ⎠   0             \n"
     ]
    }
   ],
   "source": [
    "pprint(PrEO)\n",
    "p_i = np.linspace(0.0001,1,10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "FO=Normal('FO', u,s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 797.884560802865$"
      ],
      "text/plain": [
       "797.884560802865"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(density(FO)(0.001))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "F=PrEO*density(FO)(l)\n",
    "\n",
    "numerical_integration=0\n",
    "guardando=[]\n",
    "temp_antigo=N(l.subs(l,p_i[0]))                                    \n",
    "guardando.append(temp_antigo)\n",
    "for i in range(1,len(p_i)):\n",
    "    temp= N(l.subs(l,p_i[i]))\n",
    "    guardando.append(temp)\n",
    "    numerical_integration = numerical_integration+(temp_antigo+temp)*(p_i[i]-p_i[i-1])/2\n",
    "    temp_antigo=temp\n",
    "print('denominador ='+str(numerical_integration))\n",
    "print('ou '+str(1/numerical_integration))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
